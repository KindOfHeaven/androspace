@mixin transition($attribute: all, $time: .3s, $easing: linear) {
	-webkit-transition: $attribute $time $easing;
	   -moz-transition: $attribute $time $easing;
	    -ms-transition: $attribute $time $easing;
	     -o-transition: $attribute $time $easing;
	        transition: $attribute $time $easing;
}

@mixin flex($direction: row, $content: space-between, $items: center, $wrap: nowrap, $type: flex) {
	display: $type;
	-webkit-flex-direction: $direction;
	    -ms-flex-direction: $direction;
	        flex-direction: $direction;
	-webkit-justify-content: $content;
	        justify-content: $content;
	-webkit-align-items: $items;
	        align-items: $items;
	-webkit-flex-wrap: $wrap;
	    -ms-flex-wrap: $wrap;
	        flex-wrap: $wrap;
}

@mixin btn($width, $height, $color, $bg, $colorHover: null, $bgHover: null, $colorFocus: null, $bgFocus: null,$colorInactive: null, $bgInactive: null,$border: null,$transition: .3s) {
	color: $color;
	background: $bg;
	height: $height;
	width: $width;
	text-align: center;
	cursor: pointer;
	text-decoration: none;
	outline: none;
	@include flex(row, center, center, nowrap);
	@include transition(all, $transition, ease-in-out);
	@if $border {
		border: 1px solid $border;
	}
	&:hover {
		color: if($colorHover, $colorHover, $color);
		background: if($bgHover, $bgHover, $bg);
		@if $bgHover {
			border: 1px solid $bgHover;
		}
	}
	&:focus {
		color: if($colorFocus, $colorFocus, $color);
		background: if($bgFocus, $bgFocus, $bg);
		@if $bgFocus {
			border: 1px solid $bgFocus;
		}
	}
	&[data-state="is-inactive"] {
		color: if($colorInactive, $colorInactive, $color);
		background: if($bgInactive, $bgInactive, $bg);
		@if $bgInactive {
			border: 1px solid $bgInactive;
		}
	}
	-webkit-border-radius: 4px;
	        border-radius: 4px;
}
@mixin link($color, $colorHover, $colorActive) {
	@include transition(all, .3s, ease-in-out);
	color: $color;
	&:hover {
		color: if($colorHover,$colorHover, $color);
	}
	&:active {
		color: if($colorActive,$colorActive, $color);
	}
	
}
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: ($breakpoint-value + 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}